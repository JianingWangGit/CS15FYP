{
  "stats": {
    "suites": 3,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-24T13:25:19.288Z",
    "end": "2025-05-24T13:25:19.508Z",
    "duration": 220,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b07930a8-84af-42e4-900d-86e9e268e323",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ff438a3a-43b6-4192-abb8-e2fdc62adb66",
          "title": "White-Box: Response Routes",
          "fullFile": "C:\\Users\\xijia\\Desktop\\2025S1\\back-FYP\\CS15FYP\\nodeBackEnd\\test\\response.test.js",
          "file": "\\test\\response.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"White-Box: Response Routes\"",
              "fullTitle": "White-Box: Response Routes \"after each\" hook in \"White-Box: Response Routes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore()",
              "err": {},
              "uuid": "33385c13-13f5-4b98-bba1-893d5c1ef8ad",
              "parentUUID": "ff438a3a-43b6-4192-abb8-e2fdc62adb66",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "T3.1 - should create a reply successfully",
              "fullTitle": "White-Box: Response Routes T3.1 - should create a reply successfully",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ResponseStub = function (data) {\n  Object.assign(this, data);\n  this.save = sinon.stub().resolves();\n};\nsetupApp();\nconst res = await request.post('/responses/abc123/reply').send({\n  email: 'owner@biz.com',\n  username: 'Owner',\n  comment: 'Thanks for the feedback!'\n});\nexpect(res.status).to.equal(201);\nexpect(res.body.success).to.be.true;\nexpect(res.body.reply).to.include({ comment: 'Thanks for the feedback!' });",
              "err": {},
              "uuid": "b4560f09-43e2-402d-8e99-d4248de42078",
              "parentUUID": "ff438a3a-43b6-4192-abb8-e2fdc62adb66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T3.2 - should return 400 if required fields are missing",
              "fullTitle": "White-Box: Response Routes T3.2 - should return 400 if required fields are missing",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ResponseStub = function () {\n  this.save = sinon.stub().resolves();\n};\nsetupApp();\nconst res = await request.post('/responses/abc123/reply').send({\n  username: 'Owner'\n});\nexpect(res.status).to.equal(400);\nexpect(res.body.success).to.be.false;\nexpect(res.body.error).to.match(/Email and comment are required/);",
              "err": {},
              "uuid": "331eeae1-af65-4299-8f05-8ce4be7989d2",
              "parentUUID": "ff438a3a-43b6-4192-abb8-e2fdc62adb66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T3.3 - should return 500 on DB error when posting reply",
              "fullTitle": "White-Box: Response Routes T3.3 - should return 500 on DB error when posting reply",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ResponseStub = function () {\n  this.save = sinon.stub().rejects(new Error('DB save error'));\n};\nsetupApp();\nconst res = await request.post('/responses/abc123/reply').send({\n  email: 'owner@biz.com',\n  comment: 'Appreciate it!'\n});\nexpect(res.status).to.equal(500);\nexpect(res.body.error).to.equal('DB save error');",
              "err": {},
              "uuid": "1cc5c2ec-981f-4f47-9dd4-0adde34ac099",
              "parentUUID": "ff438a3a-43b6-4192-abb8-e2fdc62adb66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T3.4 - should return replies for a review",
              "fullTitle": "White-Box: Response Routes T3.4 - should return replies for a review",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ResponseStub = {\n  find: sinon.stub().returns({ sort: sinon.stub().resolves([{ comment: 'Thanks!' }]) })\n};\nsetupApp();\nconst res = await request.get('/responses/abc123/replies');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body[0].comment).to.equal('Thanks!');",
              "err": {},
              "uuid": "2d298a60-d856-4102-92b8-a0d921f27c4d",
              "parentUUID": "ff438a3a-43b6-4192-abb8-e2fdc62adb66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T3.5 - should return 500 if DB error occurs when getting replies",
              "fullTitle": "White-Box: Response Routes T3.5 - should return 500 if DB error occurs when getting replies",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ResponseStub = {\n  find: sinon.stub().throws(new Error('Find error'))\n};\nsetupApp();\nconst res = await request.get('/responses/abc123/replies');\nexpect(res.status).to.equal(500);\nexpect(res.body.success).to.be.false;\nexpect(res.body.error).to.equal('Find error');",
              "err": {},
              "uuid": "5214b55d-aced-4013-ab18-1e573088ac36",
              "parentUUID": "ff438a3a-43b6-4192-abb8-e2fdc62adb66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4560f09-43e2-402d-8e99-d4248de42078",
            "331eeae1-af65-4299-8f05-8ce4be7989d2",
            "1cc5c2ec-981f-4f47-9dd4-0adde34ac099",
            "2d298a60-d856-4102-92b8-a0d921f27c4d",
            "5214b55d-aced-4013-ab18-1e573088ac36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7d17a09d-9070-448d-b512-602915a68dc1",
          "title": "White-Box: Restaurant Routes",
          "fullFile": "C:\\Users\\xijia\\Desktop\\2025S1\\back-FYP\\CS15FYP\\nodeBackEnd\\test\\restaurant.test.js",
          "file": "\\test\\restaurant.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"White-Box: Restaurant Routes\"",
              "fullTitle": "White-Box: Restaurant Routes \"before each\" hook in \"White-Box: Restaurant Routes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub = {\n  find: sinon.stub(),\n  findById: sinon.stub(),\n  findByIdAndUpdate: sinon.stub(),\n  save: sinon.stub(),\n  create: sinon.stub(),\n};",
              "err": {},
              "uuid": "32fff3fa-c1ee-464f-ae75-a78ff16850f1",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"White-Box: Restaurant Routes\"",
              "fullTitle": "White-Box: Restaurant Routes \"after each\" hook in \"White-Box: Restaurant Routes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore()",
              "err": {},
              "uuid": "4685d912-fba0-4f3c-a540-9e66b3defbc0",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "T2.1 - should update restaurant successfully",
              "fullTitle": "White-Box: Restaurant Routes T2.1 - should update restaurant successfully",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.findById.resolves({ _id: 'r1' });\nRestaurantStub.findByIdAndUpdate.resolves(validPayload);\nsetupApp();\nconst res = await request.put('/restaurants/r1').send(validPayload);\nexpect(res.status).to.equal(200);\nexpect(res.body.name).to.equal('UpdatedName');",
              "err": {},
              "uuid": "a557caee-cba8-4303-9950-81d201b42c50",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.2 - should return 400 if required field missing",
              "fullTitle": "White-Box: Restaurant Routes T2.2 - should return 400 if required field missing",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.findById.resolves({ _id: 'r1' });\nsetupApp();\nconst payload = { ...validPayload };\ndelete payload.name;\nconst res = await request.put('/restaurants/r1').send(payload);\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.match(/Missing required field: name/);",
              "err": {},
              "uuid": "2e64d313-064f-4fb4-a683-f097561f23b4",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.3 - should return 404 if restaurant not found",
              "fullTitle": "White-Box: Restaurant Routes T2.3 - should return 404 if restaurant not found",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.findById.resolves(null);\nsetupApp();\nconst res = await request.put('/restaurants/r1').send(validPayload);\nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "6380bb24-967b-4bb8-9863-8ee99b484c13",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.4 - should return 500 if update fails",
              "fullTitle": "White-Box: Restaurant Routes T2.4 - should return 500 if update fails",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.findById.resolves({ _id: 'r1' });\nRestaurantStub.findByIdAndUpdate.rejects(new Error('Update failed'));\nsetupApp();\nconst res = await request.put('/restaurants/r1').send(validPayload);\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "fec89d07-5e23-4218-947c-792426a67502",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.5 - should fetch all restaurants",
              "fullTitle": "White-Box: Restaurant Routes T2.5 - should fetch all restaurants",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.resolves([{ name: 'Test Restaurant' }]);\nsetupApp();\nconst res = await request.get('/restaurants');\nexpect(res.status).to.equal(200);\nexpect(res.body.data).to.be.an('array');",
              "err": {},
              "uuid": "03955e76-0a2c-4da7-ada6-cf14b45ba5fd",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.6 - should handle DB error fetching restaurants",
              "fullTitle": "White-Box: Restaurant Routes T2.6 - should handle DB error fetching restaurants",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.rejects(new Error('DB error'));\nsetupApp();\nconst res = await request.get('/restaurants');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "719106b3-c274-42de-807b-24d5c61aa1a5",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.7 - should search restaurants successfully",
              "fullTitle": "White-Box: Restaurant Routes T2.7 - should search restaurants successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.resolves([{ name: 'Pizza' }]);\nsetupApp();\nconst res = await request.get('/restaurants/search?query=pizza');\nexpect(res.status).to.equal(200);\nexpect(res.body.data).to.have.length(1);",
              "err": {},
              "uuid": "96824e8e-a570-4a74-87b4-e75b52d4cd62",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.8 - should return 400 for empty search query",
              "fullTitle": "White-Box: Restaurant Routes T2.8 - should return 400 for empty search query",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setupApp();\nconst res = await request.get('/restaurants/search');\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "bb85c5ed-c726-4ff0-8bf7-2cd8dd9fb9bf",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.9 - should handle DB error during search",
              "fullTitle": "White-Box: Restaurant Routes T2.9 - should handle DB error during search",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.rejects(new Error('DB error'));\nsetupApp();\nconst res = await request.get('/restaurants/search?query=test');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "d05f405c-f0e1-44ff-81b7-3d71ab28019d",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.10 - should fetch restaurants by business user",
              "fullTitle": "White-Box: Restaurant Routes T2.10 - should fetch restaurants by business user",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.resolves([{ name: 'Biz Restaurant' }]);\nsetupApp();\nconst res = await request.get('/restaurants/business/biz1');\nexpect(res.status).to.equal(200);\nexpect(res.body.data).to.have.length(1);",
              "err": {},
              "uuid": "3562e412-bff6-4d74-9827-87dfa58f5b34",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.11 - should fetch restaurants by cuisine",
              "fullTitle": "White-Box: Restaurant Routes T2.11 - should fetch restaurants by cuisine",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.resolves([{ cuisine: 'Thai' }]);\nsetupApp();\nconst res = await request.get('/restaurants/cuisine/Thai');\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "b016585f-6369-47ff-811a-7f483946a6e0",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.12 - should handle DB error for cuisine search",
              "fullTitle": "White-Box: Restaurant Routes T2.12 - should handle DB error for cuisine search",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.rejects(new Error('DB error'));\nsetupApp();\nconst res = await request.get('/restaurants/cuisine/Thai');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "c16b301d-bb2a-4c58-b648-d00872d4bbe2",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.13 - should fetch restaurants by price range",
              "fullTitle": "White-Box: Restaurant Routes T2.13 - should fetch restaurants by price range",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.resolves([{ priceRange: 2 }]);\nsetupApp();\nconst res = await request.get('/restaurants/price/2');\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "443c41ea-9cf0-473b-bc5b-067c4ed3b2d3",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.14 - should handle DB error for price range search",
              "fullTitle": "White-Box: Restaurant Routes T2.14 - should handle DB error for price range search",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.find.rejects(new Error('DB error'));\nsetupApp();\nconst res = await request.get('/restaurants/price/2');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "4ad33671-afa0-4151-879a-588d8c6823c9",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.15 - should create a new restaurant successfully",
              "fullTitle": "White-Box: Restaurant Routes T2.15 - should create a new restaurant successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub = function (data) {\n  Object.assign(this, data);\n  this.save = sinon.stub().resolves(); // simulate DB save success\n};\nsetupApp();\nconst res = await request.post('/restaurants').send({\n  name: 'New Resto',\n  description: 'Tasty food',\n  cuisine: 'Thai',\n  address: '123 Lane',\n  imageUrl: 'http://img.png',\n  priceRange: 2,\n  hours: {},\n  businessUserId: 'biz9'\n});\nexpect(res.status).to.equal(201);\nexpect(res.body.message).to.equal('Restaurant created');",
              "err": {},
              "uuid": "e89205a3-736a-40d9-817b-5246237afe2e",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.16 - should fail to create a restaurant with invalid payload",
              "fullTitle": "White-Box: Restaurant Routes T2.16 - should fail to create a restaurant with invalid payload",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.create = sinon.stub().rejects(new Error('Validation error'));\nsetupApp();\nconst res = await request.post('/restaurants').send({});\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "ce083680-1287-4c2d-b56c-83f7ba0e3d23",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.17 - should fetch restaurant by ID successfully",
              "fullTitle": "White-Box: Restaurant Routes T2.17 - should fetch restaurant by ID successfully",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.findById.resolves(validPayload);\nsetupApp();\nconst res = await request.get('/restaurants/r1');\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "ab5fbb92-67c4-46d7-b681-d699ac796a97",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.18 - should return 404 if restaurant by ID not found",
              "fullTitle": "White-Box: Restaurant Routes T2.18 - should return 404 if restaurant by ID not found",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.findById.resolves(null);\nsetupApp();\nconst res = await request.get('/restaurants/r999');\nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "d720363b-2eb3-4b78-9e6e-8e466bfe2713",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T2.19 - should handle DB error fetching by ID",
              "fullTitle": "White-Box: Restaurant Routes T2.19 - should handle DB error fetching by ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub.findById.rejects(new Error('DB error'));\nsetupApp();\nconst res = await request.get('/restaurants/r1');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "09ecd7ef-2729-41c1-8a00-8dc37114ea9c",
              "parentUUID": "7d17a09d-9070-448d-b512-602915a68dc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a557caee-cba8-4303-9950-81d201b42c50",
            "2e64d313-064f-4fb4-a683-f097561f23b4",
            "6380bb24-967b-4bb8-9863-8ee99b484c13",
            "fec89d07-5e23-4218-947c-792426a67502",
            "03955e76-0a2c-4da7-ada6-cf14b45ba5fd",
            "719106b3-c274-42de-807b-24d5c61aa1a5",
            "96824e8e-a570-4a74-87b4-e75b52d4cd62",
            "bb85c5ed-c726-4ff0-8bf7-2cd8dd9fb9bf",
            "d05f405c-f0e1-44ff-81b7-3d71ab28019d",
            "3562e412-bff6-4d74-9827-87dfa58f5b34",
            "b016585f-6369-47ff-811a-7f483946a6e0",
            "c16b301d-bb2a-4c58-b648-d00872d4bbe2",
            "443c41ea-9cf0-473b-bc5b-067c4ed3b2d3",
            "4ad33671-afa0-4151-879a-588d8c6823c9",
            "e89205a3-736a-40d9-817b-5246237afe2e",
            "ce083680-1287-4c2d-b56c-83f7ba0e3d23",
            "ab5fbb92-67c4-46d7-b681-d699ac796a97",
            "d720363b-2eb3-4b78-9e6e-8e466bfe2713",
            "09ecd7ef-2729-41c1-8a00-8dc37114ea9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
          "title": "White-Box: Review Routes",
          "fullFile": "C:\\Users\\xijia\\Desktop\\2025S1\\back-FYP\\CS15FYP\\nodeBackEnd\\test\\review.test.js",
          "file": "\\test\\review.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"White-Box: Review Routes\"",
              "fullTitle": "White-Box: Review Routes \"before each\" hook in \"White-Box: Review Routes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RestaurantStub = {\n  findByIdAndUpdate: sinon.stub()\n};",
              "err": {},
              "uuid": "4f37348b-b2f8-479c-a291-ea7821a088fa",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"White-Box: Review Routes\"",
              "fullTitle": "White-Box: Review Routes \"after each\" hook in \"White-Box: Review Routes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore()",
              "err": {},
              "uuid": "1a618727-3fff-4817-b194-0e9ff343cdfd",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "T1.1 - should create review and update restaurant rating",
              "fullTitle": "White-Box: Review Routes T1.1 - should create review and update restaurant rating",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ReviewStub = function (data) {\n  Object.assign(this, data);\n  this.save = sinon.stub().resolves();\n};\nReviewStub.find = sinon.stub().resolves([{ rating: 4 }, { rating: 2 }]);\nsetupApp();\nconst res = await request.post('/reviews').send({\n  restaurantId: 'r1',\n  userId: 'u1',\n  rating: 3,\n  username: 'TestUser',\n  comment: 'Nice food!',\n  photos: []\n});\nexpect(res.status).to.equal(201);\nexpect(res.body.success).to.be.true;\nconst updateArgs = RestaurantStub.findByIdAndUpdate.firstCall.args;\nexpect(updateArgs[0]).to.equal('r1');\nexpect(updateArgs[1]).to.have.property('rating', 3); // (4+2)/2 = 3",
              "err": {},
              "uuid": "cd0d41a9-9fd7-418e-be6f-c1bd0238fc8c",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T1.2 - should return 400 if required fields are missing",
              "fullTitle": "White-Box: Review Routes T1.2 - should return 400 if required fields are missing",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ReviewStub = function () { this.save = sinon.stub().resolves(); };\nReviewStub.find = sinon.stub().resolves([]);\nsetupApp();\nconst res = await request.post('/reviews').send({ comment: 'Missing stuff' });\nexpect(res.status).to.equal(400);\nexpect(res.body.error).to.match(/Missing required fields/);",
              "err": {},
              "uuid": "7d379b2a-d7d3-49e9-acd8-4819316a1c81",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T1.3 - should return 500 on internal error",
              "fullTitle": "White-Box: Review Routes T1.3 - should return 500 on internal error",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ReviewStub = function () {\n  this.save = sinon.stub().rejects(new Error('Simulated DB error'));\n};\nReviewStub.find = sinon.stub().resolves([]);\nsetupApp();\nconst res = await request.post('/reviews').send({\n  restaurantId: 'r2',\n  userId: 'u2',\n  rating: 4\n});\nexpect(res.status).to.equal(500);\nexpect(res.body.error).to.equal('Simulated DB error');",
              "err": {},
              "uuid": "140ff913-91c6-4e71-9968-c9b0ab427324",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T1.4 - should return reviews for a restaurant",
              "fullTitle": "White-Box: Review Routes T1.4 - should return reviews for a restaurant",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ReviewStub = {\n  find: sinon.stub().returns({\n    sort: sinon.stub().returns({\n      skip: sinon.stub().returns({\n        limit: sinon.stub().resolves([{ rating: 5 }, { rating: 4 }])\n      })\n    })\n  })\n};\nsetupApp();\nconst res = await request.get('/reviews?restaurantId=r1');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.equal(2);",
              "err": {},
              "uuid": "f51f567d-6f38-4e22-a1db-b9144a1d24c6",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T1.5 - should return 500 on DB error when getting reviews",
              "fullTitle": "White-Box: Review Routes T1.5 - should return 500 on DB error when getting reviews",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ReviewStub = {\n  find: sinon.stub().throws(new Error('Find failed'))\n};\nsetupApp();\nconst res = await request.get('/reviews?restaurantId=r1');\nexpect(res.status).to.equal(500);\nexpect(res.body.error).to.equal('Find failed');",
              "err": {},
              "uuid": "0b5be92d-e99c-45f1-9726-6d867994e214",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T1.6 - should return user reviews for given userId",
              "fullTitle": "White-Box: Review Routes T1.6 - should return user reviews for given userId",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ReviewStub = {\n  find: sinon.stub().returns({\n    sort: sinon.stub().returns({\n      skip: sinon.stub().returns({\n        limit: sinon.stub().resolves([{ rating: 3 }])\n      })\n    })\n  })\n};\nsetupApp();\nconst res = await request.get('/reviews/user?userId=u1');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body[0].rating).to.equal(3);",
              "err": {},
              "uuid": "0a2dca6e-3ab4-4231-8f0f-b5af263dd6cf",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T1.7 - should return 400 if userId is missing",
              "fullTitle": "White-Box: Review Routes T1.7 - should return 400 if userId is missing",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ReviewStub = { find: sinon.stub() };\nsetupApp();\nconst res = await request.get('/reviews/user');\nexpect(res.status).to.equal(400);\nexpect(res.body.error).to.match(/Missing userId/);",
              "err": {},
              "uuid": "95fcbb6d-0cdc-4162-886c-d8abfc36aa47",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "T1.8 - should return 500 if DB error occurs in user review fetch",
              "fullTitle": "White-Box: Review Routes T1.8 - should return 500 if DB error occurs in user review fetch",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ReviewStub = {\n  find: sinon.stub().throws(new Error('User fetch failed'))\n};\nsetupApp();\nconst res = await request.get('/reviews/user?userId=u1');\nexpect(res.status).to.equal(500);\nexpect(res.body.error).to.equal('User fetch failed');",
              "err": {},
              "uuid": "1300445f-c3c5-492d-af19-83570f626ed6",
              "parentUUID": "f5b39ee2-d463-4f2b-8de3-0fe718051286",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd0d41a9-9fd7-418e-be6f-c1bd0238fc8c",
            "7d379b2a-d7d3-49e9-acd8-4819316a1c81",
            "140ff913-91c6-4e71-9968-c9b0ab427324",
            "f51f567d-6f38-4e22-a1db-b9144a1d24c6",
            "0b5be92d-e99c-45f1-9726-6d867994e214",
            "0a2dca6e-3ab4-4231-8f0f-b5af263dd6cf",
            "95fcbb6d-0cdc-4162-886c-d8abfc36aa47",
            "1300445f-c3c5-492d-af19-83570f626ed6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.5.0"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "white-box-test-summary",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "white-box-test-summary",
        "quiet": "true"
      },
      "version": "6.2.0"
    }
  }
}